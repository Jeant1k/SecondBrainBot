#include <iostream>
#include <vector>
#include <random>

#include <tgbot/tgbot.h>
#include "DatabaseService/include/DatabaseService.hpp"

// TODO: –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª "—Å–¥–µ–ª–∞–π —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å"

const std::vector<std::string> lists = {
    "–ó–∞–º–µ—Ç–∫–∏",
    "–û–∂–∏–¥–∞–Ω–∏–µ",
    "–ö–∞–ª–µ–Ω–¥–∞—Ä—å",
    "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º",
    "–ü—Ä–æ–µ–∫—Ç—ã",
    "–¢–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è"
};

const std::vector<std::string> notes_categories = {
    "–†–∞–±–æ—Ç–∞",
    "–õ–∏—á–Ω—ã–µ",
    "–ó–¥–æ—Ä–æ–≤—å–µ",
    "–ü–æ–∫—É–ø–∫–∏",
    "–§–∏–Ω–∞–Ω—Å—ã",
    "–ö–Ω–∏–≥–∏/–§–∏–ª—å–º—ã/–ú—É–∑—ã–∫–∞",
    "–¢—É—Ä–∏–∑–º",
    "–ï–¥–∞",
    "–£—á–µ–±–∞",
    "–ü—Ä–æ–µ–∫—Ç—ã"
};

std::vector<std::string> someday_categories = {
    "–û–±—É—á–µ–Ω–∏–µ –∏ —Ä–∞–∑–≤–∏—Ç–∏–µ",
    "–ü—É—Ç–µ—à–µ—Å—Ç–≤–∏—è",
    "–ó–¥–æ—Ä–æ–≤—å–µ –∏ —Ñ–∏—Ç–Ω–µ—Å",
    "–õ–∏—á–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã",
    "–ö–∞—Ä—å–µ—Ä–∞ –∏ —Ä–∞–±–æ—Ç–∞",
    "–î–µ–Ω—å–≥–∏",
    "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ –∏ —Å–µ–º–µ–π–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è",
    "–î—É—Ö–æ–≤–Ω–æ—Å—Ç—å",
    "–í–æ–ª–æ–Ω—Ç–µ—Ä—Å—Ç–≤–æ –∏ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å",
    "–õ–∏—á–Ω–æ–µ –±–ª–∞–≥–æ–ø–æ–ª—É—á–∏–µ"
};

std::unordered_map<int64_t, std::string> chatStates;


int main() {

    TgBot::Bot bot("5699724308:AAEO8PxBfWj-Bnd2Y6WYRyT2NJPWdjrqkLY");

    Database db("dbname=secondbrainbot user=jeantik password=123 hostaddr=127.0.0.1 port=5432");
    db.connect();


    // –û–±—ä—è–≤–ª–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥

    std::vector<std::string> bot_commands = {"start", "help", "support"};

    std::vector<TgBot::BotCommand::Ptr> commands;

    TgBot::BotCommand::Ptr cmdArray(new TgBot::BotCommand);
    cmdArray->command = "start";
    cmdArray->description = "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞";
    commands.push_back(cmdArray);

    cmdArray = TgBot::BotCommand::Ptr(new TgBot::BotCommand);
    cmdArray->command = "help";
    cmdArray->description = "–°–ø—Ä–∞–≤–∫–∞";
    commands.push_back(cmdArray);

    cmdArray = TgBot::BotCommand::Ptr(new TgBot::BotCommand);
    cmdArray->command = "support";
    cmdArray->description = "–ü–æ–¥–¥–µ—Ä–∂–∫–∞";
    commands.push_back(cmdArray);

    bot.getApi().setMyCommands(commands);

    std::vector<TgBot::BotCommand::Ptr> vectCmd;
    vectCmd = bot.getApi().getMyCommands();

    for(std::vector<TgBot::BotCommand::Ptr>::iterator it = vectCmd.begin(); it != vectCmd.end(); ++it)
        std::cout << "–ö–æ–º–∞–Ω–¥—ã: " << (*it)->command << " -> " << (*it)->description << std::endl;


    // –û—Å–Ω–æ–≤–∞

    // –ó–∞—á–µ–º –≤ –ë–î —Ö—Ä–∞–Ω–∏—Ç—å —Å–ø–∏—Å–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è? –û–Ω–∏ –∂–µ –æ–¥–∏–Ω–∞–∫–æ–≤—ã–µ. –ú–æ–∂–Ω–æ –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å ID —ç—Ç–∏—Ö —Å–ø–∏—Å–∫–æ–≤ –¥–ª—è –≤—Å–µ—Ö.
    bot.getEvents().onCommand("start", [&bot, &db](TgBot::Message::Ptr message) {
        bot.getApi().sendChatAction(message->chat->id, "typing");
        auto result = db.call_procedure("register_user", message->chat->id, message->from->firstName);
        if (result && *result)
            bot.getApi().sendMessage(message->chat->id, "*–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ª—é–±—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É!*\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é, –Ω–∞–∂–º–∏ /help.", false, 0, nullptr, "Markdown");
        else
            bot.getApi().sendMessage(message->chat->id, "–ü—Ä–∏–≤–µ—Ç!  üôå\n–Ø —É–º–Ω—ã–π –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∏—Ä–æ–≤–∞—Ç—å –≤–µ–¥–µ–Ω–∏–µ —Ç–≤–æ–µ–π —Å–∏—Å—Ç–µ–º—ã GTD.\n\n*–ü—Ä–∏—à–ª–∏ –º–Ω–µ –ª—é–±—É—é –∑–∞–¥–∞—á—É –∏–ª–∏ –∑–∞–º–µ—Ç–∫—É!*\n\n–î–ª—è —Ç–æ–≥–æ, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –∫–∞–∫ —è —Ä–∞–±–æ—Ç–∞—é, –Ω–∞–∂–º–∏ /help.", false, 0, nullptr, "Markdown");
    });

    bot.getEvents().onCommand("help", [&bot](TgBot::Message::Ptr message) {
        bot.getApi().sendChatAction(message->chat->id, "typing");
        bot.getApi().sendMessage(message->chat->id, "–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∑–¥–µ—Å—å. –°–¥–µ–ª–∞—Ç—å –º–µ–Ω—é –≤ –≤–∏–¥–µ –∫–Ω–æ–ø–æ–∫ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–µ–π –∫ –±–æ—Ç—É. –¢—É—Ç –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ–±—É—á–µ–Ω–∏–µ, –æ–ø–∏—Å–∞–Ω–∏–µ —Ñ—É–Ω–∫—Ü–∏–π –±–æ—Ç–∞, –æ–ø–∏—Å–∞–Ω–∏–µ —Ç–æ–≥–æ –∫–∞–∫ —Å –Ω–∏–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å, —Ç–µ–æ—Ä–µ—Ç–∏—á–µ—Å–∫–∏–µ —Å–≤–µ–¥–µ–Ω–∏—è –æ —Å–∏—Å—Ç–µ–º–µ –ì–¢–î, —Å–æ–≤–µ—Ç—ã –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∏ —Ç.–¥.");
    });

    bot.getEvents().onCommand("support", [&bot](TgBot::Message::Ptr message) {
        bot.getApi().sendChatAction(message->chat->id, "typing");
        bot.getApi().sendMessage(message->chat->id, "–í–∞–º —á—Ç–æ-—Ç–æ –Ω–µ –ø–æ–Ω—Ä–∞–≤–∏–ª–æ—Å—å? –ß—Ç–æ-—Ç–æ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç? –£ –≤–∞—Å –µ—Å—Ç—å –ø–æ–∂–µ–ª–∞–Ω–∏—è –∏–ª–∏ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è?\n\n–ü–∏—à–∏—Ç–µ @Jeant1k, –±—É–¥–µ–º –æ—á–µ–Ω—å —Ä–∞–¥—ã –≤–∞—à–µ–º—É –æ—Ç–∑—ã–≤—É!");
    });

    bot.getEvents().onAnyMessage([&bot, &bot_commands, &db](TgBot::Message::Ptr message) {
        bot.getApi().sendChatAction(message->chat->id, "typing");

        std::cout << "–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: " << message->text << std::endl;
        for (const auto& command : bot_commands)
            if ("/" + command == message->text) return;

        if (chatStates[message->chat->id] == "waitingForDateTime") {
            chatStates[message->chat->id] = "";
            std::ifstream fileStream("/home/jeantik/programs/SecondBrainBot/files/template.ics", std::ios::binary);
            std::string fileContent((std::istreambuf_iterator<char>(fileStream)), std::istreambuf_iterator<char>());
            TgBot::InputFile::Ptr inputFile(new TgBot::InputFile);
            inputFile->fileName = "template.ics";
            inputFile->mimeType = "text/calendar";
            inputFile->data = fileContent;
            bot.getApi().sendMessage(message->chat->id, "–í–æ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è");
            bot.getApi().sendDocument(message->chat->id, inputFile);
        } else {
            std::random_device rd;
            std::mt19937 gen(rd());

            std::uniform_int_distribution<> distrib(0, lists.size() - 1);
            std::string list = lists[distrib(gen)];

            if (list == "–ó–∞–º–µ—Ç–∫–∏") {
                std::uniform_int_distribution<> distrib(0, notes_categories.size() - 1);
                std::string categorie = notes_categories[distrib(gen)];
                std::string description = "description";
                db.call_procedure("add_task", list, message->text, description, categorie);
                bot.getApi().sendMessage(message->chat->id, "–î–æ–±–∞–≤–∏–ª –≤ —Å–ø–∏—Å–æ–∫ " + list + " –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é " + categorie);
            } else if (list == "–û–∂–∏–¥–∞–Ω–∏–µ") {
                db.call_procedure("add_task", list, message->text);
                bot.getApi().sendMessage(message->chat->id, "–î–æ–±–∞–≤–∏–ª –≤ —Å–ø–∏—Å–æ–∫ " + list);
                bot.getApi().sendMessage(message->chat->id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–π —à–∞–±–ª–æ–Ω –¥–ª—è –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á–∏ —á–µ–ª–æ–≤–µ–∫—É.");
            } else if (list == "–ö–∞–ª–µ–Ω–¥–∞—Ä—å") {
                std::uniform_int_distribution<> distrib(0, 1);
                if (distrib(gen)) {
                    bot.getApi().sendMessage(message->chat->id, "–£—Ç–æ—á–Ω–∏—Ç–µ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è");
                    chatStates[message->chat->id] = "waitingForDateTime";
                } else {
                    std::ifstream fileStream("/home/jeantik/programs/SecondBrainBot/files/template.ics", std::ios::binary);
                    std::string fileContent((std::istreambuf_iterator<char>(fileStream)), std::istreambuf_iterator<char>());
                    TgBot::InputFile::Ptr inputFile(new TgBot::InputFile);
                    inputFile->fileName = "template.ics";
                    inputFile->mimeType = "text/calendar";
                    inputFile->data = fileContent;
                    bot.getApi().sendMessage(message->chat->id, "–í–æ—Ç —Å–æ–±—ã—Ç–∏–µ –¥–ª—è –≤–∞—à–µ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è");
                    bot.getApi().sendDocument(message->chat->id, inputFile);
                }
            } else if (list == "–ö–æ–≥–¥–∞-–Ω–∏–±—É–¥—å –ø–æ—Ç–æ–º") {
                std::uniform_int_distribution<> distrib(0, someday_categories.size() - 1);
                std::string categorie = someday_categories[distrib(gen)];
                std::string description = "description";
                db.call_procedure("add_task", list, message->text, description, categorie);
                bot.getApi().sendMessage(message->chat->id, "–î–æ–±–∞–≤–∏–ª –≤ —Å–ø–∏—Å–æ–∫ " + list + " –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é " + categorie);
            } else if (list == "–ü—Ä–æ–µ–∫—Ç—ã") {
                std::string description = "description";
                db.call_procedure("add_task", list, message->text, description);
                bot.getApi().sendMessage(message->chat->id, "–ó–¥–µ—Å—å –±—É–¥–µ—Ç –ø—Ä–∏–º–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–Ω–æ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞: –∫—Ä–∏—Ç–µ—Ä–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –ø–ª–∞–Ω, –ø–µ—Ä–≤—ã–π —à–∞–≥");
            } else if (list == "–¢–µ–∫—É—â–∏–µ –¥–µ–π—Å—Ç–≤–∏—è") {
                std::uniform_int_distribution<> distrib(0, 1);
                if (distrib(gen)) {
                    bot.getApi().sendMessage(message->chat->id, "–°–¥–µ–ª–∞–π —ç—Ç–æ –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å!");
                } else {
                    db.call_procedure("add_task", list, message->text);
                    bot.getApi().sendMessage(message->chat->id, "–î–æ–±–∞–≤–∏–ª –≤ —Å–ø–∏—Å–æ–∫ " + list);
                }
            } else if (list == "–ê—Ä—Ö–∏–≤") {
                // db.call_procedure("archive");
                bot.getApi().sendMessage(message->chat->id, "–ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª –≤ –∞—Ä—Ö–∏–≤");
            } else if (list == "–°–¥–µ–ª–∞–Ω–æ") {
                // db.call_procedure("move_to_done");
                bot.getApi().sendMessage(message->chat->id, "–ü–µ—Ä–µ–º–µ—Å—Ç–∏–ª –≤ —Å–¥–µ–ª–∞–Ω–æ");
            } else {
                bot.getApi().sendMessage(message->chat->id, "–ö–∞—Ç–µ–≥–æ—Ä–∏—è –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞");
            }
        }
    });

    signal(SIGINT, [](int s) {
        std::cout << std::endl << "SIGINT –ø–æ–π–º–∞–ª" << std::endl;
        exit(0);
    });

    try {
        std::cout << "–ò–º—è –±–æ—Ç–∞: " << bot.getApi().getMe()->username << std::endl;
        TgBot::TgLongPoll longPoll(bot);
        while (true) {
            std::cout << "LongPoll –∑–∞–ø—É—Å—Ç–∏–ª—Å—è" << std::endl;
            longPoll.start();
        }
    } catch (TgBot::TgException& e) {
        std::cout << "–û—à–∏–±–∫–∞: " << e.what() << std::endl;
    }

    return 0;

}